/* 
 * Prepaidforge API
 *
 * The public api for prepaidforge
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PrepaidforgeSDK.Client.OpenAPIDateConverter;

namespace PrepaidforgeSDK.Model
{
    /// <summary>
    /// Money
    /// </summary>
    [DataContract]
    public partial class Money :  IEquatable<Money>, IValidatableObject
    {
        /// <summary>
        /// Defines Currency
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            /// <summary>
            /// Enum EUR for value: EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR = 1,

            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 2,

            /// <summary>
            /// Enum GBP for value: GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP = 3,

            /// <summary>
            /// Enum CHF for value: CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHF = 4,

            /// <summary>
            /// Enum DKK for value: DKK
            /// </summary>
            [EnumMember(Value = "DKK")]
            DKK = 5,

            /// <summary>
            /// Enum NOK for value: NOK
            /// </summary>
            [EnumMember(Value = "NOK")]
            NOK = 6,

            /// <summary>
            /// Enum PLN for value: PLN
            /// </summary>
            [EnumMember(Value = "PLN")]
            PLN = 7,

            /// <summary>
            /// Enum SEK for value: SEK
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEK = 8,

            /// <summary>
            /// Enum RUB for value: RUB
            /// </summary>
            [EnumMember(Value = "RUB")]
            RUB = 9,

            /// <summary>
            /// Enum AUD for value: AUD
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUD = 10,

            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 11,

            /// <summary>
            /// Enum SAR for value: SAR
            /// </summary>
            [EnumMember(Value = "SAR")]
            SAR = 12

        }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Money" /> class.
        /// </summary>
        /// <param name="amount">amount.</param>
        /// <param name="currency">currency.</param>
        /// <param name="formattedString">formattedString.</param>
        /// <param name="csvamount">csvamount.</param>
        /// <param name="roundedFormattedString">roundedFormattedString.</param>
        public Money(decimal? amount = default(decimal?), CurrencyEnum? currency = default(CurrencyEnum?), string formattedString = default(string), string csvamount = default(string), string roundedFormattedString = default(string))
        {
            this.Amount = amount;
            this.Currency = currency;
            this.FormattedString = formattedString;
            this.Csvamount = csvamount;
            this.RoundedFormattedString = roundedFormattedString;
        }
        
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }


        /// <summary>
        /// Gets or Sets FormattedString
        /// </summary>
        [DataMember(Name="formattedString", EmitDefaultValue=false)]
        public string FormattedString { get; set; }

        /// <summary>
        /// Gets or Sets Csvamount
        /// </summary>
        [DataMember(Name="csvamount", EmitDefaultValue=false)]
        public string Csvamount { get; set; }

        /// <summary>
        /// Gets or Sets RoundedFormattedString
        /// </summary>
        [DataMember(Name="roundedFormattedString", EmitDefaultValue=false)]
        public string RoundedFormattedString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Money {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  FormattedString: ").Append(FormattedString).Append("\n");
            sb.Append("  Csvamount: ").Append(Csvamount).Append("\n");
            sb.Append("  RoundedFormattedString: ").Append(RoundedFormattedString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Money);
        }

        /// <summary>
        /// Returns true if Money instances are equal
        /// </summary>
        /// <param name="input">Instance of Money to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Money input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.FormattedString == input.FormattedString ||
                    (this.FormattedString != null &&
                    this.FormattedString.Equals(input.FormattedString))
                ) && 
                (
                    this.Csvamount == input.Csvamount ||
                    (this.Csvamount != null &&
                    this.Csvamount.Equals(input.Csvamount))
                ) && 
                (
                    this.RoundedFormattedString == input.RoundedFormattedString ||
                    (this.RoundedFormattedString != null &&
                    this.RoundedFormattedString.Equals(input.RoundedFormattedString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.FormattedString != null)
                    hashCode = hashCode * 59 + this.FormattedString.GetHashCode();
                if (this.Csvamount != null)
                    hashCode = hashCode * 59 + this.Csvamount.GetHashCode();
                if (this.RoundedFormattedString != null)
                    hashCode = hashCode * 59 + this.RoundedFormattedString.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
