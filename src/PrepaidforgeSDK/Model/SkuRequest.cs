/* 
 * Prepaidforge API
 *
 * The public api for prepaidforge
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PrepaidforgeSDK.Client.OpenAPIDateConverter;

namespace PrepaidforgeSDK.Model
{
    /// <summary>
    /// SkuRequest
    /// </summary>
    [DataContract]
    public partial class SkuRequest :  IEquatable<SkuRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines CodeType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeTypeEnum
        {
            /// <summary>
            /// Enum TEXT for value: TEXT
            /// </summary>
            [EnumMember(Value = "TEXT")]
            TEXT = 1,

            /// <summary>
            /// Enum SCAN for value: SCAN
            /// </summary>
            [EnumMember(Value = "SCAN")]
            SCAN = 2,

            /// <summary>
            /// Enum FULLSCAN for value: FULLSCAN
            /// </summary>
            [EnumMember(Value = "FULLSCAN")]
            FULLSCAN = 3,

            /// <summary>
            /// Enum OCR for value: OCR
            /// </summary>
            [EnumMember(Value = "OCR")]
            OCR = 4,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 5

        }

        /// <summary>
        /// Gets or Sets CodeType
        /// </summary>
        [DataMember(Name="codeType", EmitDefaultValue=false)]
        public CodeTypeEnum? CodeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SkuRequest" /> class.
        /// </summary>
        /// <param name="stockId">stockId.</param>
        /// <param name="sku">sku.</param>
        /// <param name="price">price.</param>
        /// <param name="codeType">codeType.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="customOrderReference">customOrderReference.</param>
        /// <param name="quantityHandled">quantityHandled.</param>
        /// <param name="requestHandled">requestHandled.</param>
        /// <param name="quantityNeeded">quantityNeeded.</param>
        public SkuRequest(long? stockId = default(long?), string sku = default(string), decimal? price = default(decimal?), CodeTypeEnum? codeType = default(CodeTypeEnum?), decimal? quantity = default(decimal?), string customOrderReference = default(string), int? quantityHandled = default(int?), bool? requestHandled = default(bool?), decimal? quantityNeeded = default(decimal?))
        {
            this.StockId = stockId;
            this.Sku = sku;
            this.Price = price;
            this.CodeType = codeType;
            this.Quantity = quantity;
            this.CustomOrderReference = customOrderReference;
            this.QuantityHandled = quantityHandled;
            this.RequestHandled = requestHandled;
            this.QuantityNeeded = quantityNeeded;
        }
        
        /// <summary>
        /// Gets or Sets StockId
        /// </summary>
        [DataMember(Name="stockId", EmitDefaultValue=false)]
        public long? StockId { get; set; }

        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public decimal? Price { get; set; }


        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets CustomOrderReference
        /// </summary>
        [DataMember(Name="customOrderReference", EmitDefaultValue=false)]
        public string CustomOrderReference { get; set; }

        /// <summary>
        /// Gets or Sets QuantityHandled
        /// </summary>
        [DataMember(Name="quantityHandled", EmitDefaultValue=false)]
        public int? QuantityHandled { get; set; }

        /// <summary>
        /// Gets or Sets RequestHandled
        /// </summary>
        [DataMember(Name="requestHandled", EmitDefaultValue=false)]
        public bool? RequestHandled { get; set; }

        /// <summary>
        /// Gets or Sets QuantityNeeded
        /// </summary>
        [DataMember(Name="quantityNeeded", EmitDefaultValue=false)]
        public decimal? QuantityNeeded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SkuRequest {\n");
            sb.Append("  StockId: ").Append(StockId).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  CodeType: ").Append(CodeType).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  CustomOrderReference: ").Append(CustomOrderReference).Append("\n");
            sb.Append("  QuantityHandled: ").Append(QuantityHandled).Append("\n");
            sb.Append("  RequestHandled: ").Append(RequestHandled).Append("\n");
            sb.Append("  QuantityNeeded: ").Append(QuantityNeeded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SkuRequest);
        }

        /// <summary>
        /// Returns true if SkuRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SkuRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SkuRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StockId == input.StockId ||
                    (this.StockId != null &&
                    this.StockId.Equals(input.StockId))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.CodeType == input.CodeType ||
                    (this.CodeType != null &&
                    this.CodeType.Equals(input.CodeType))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.CustomOrderReference == input.CustomOrderReference ||
                    (this.CustomOrderReference != null &&
                    this.CustomOrderReference.Equals(input.CustomOrderReference))
                ) && 
                (
                    this.QuantityHandled == input.QuantityHandled ||
                    (this.QuantityHandled != null &&
                    this.QuantityHandled.Equals(input.QuantityHandled))
                ) && 
                (
                    this.RequestHandled == input.RequestHandled ||
                    (this.RequestHandled != null &&
                    this.RequestHandled.Equals(input.RequestHandled))
                ) && 
                (
                    this.QuantityNeeded == input.QuantityNeeded ||
                    (this.QuantityNeeded != null &&
                    this.QuantityNeeded.Equals(input.QuantityNeeded))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StockId != null)
                    hashCode = hashCode * 59 + this.StockId.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.CodeType != null)
                    hashCode = hashCode * 59 + this.CodeType.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.CustomOrderReference != null)
                    hashCode = hashCode * 59 + this.CustomOrderReference.GetHashCode();
                if (this.QuantityHandled != null)
                    hashCode = hashCode * 59 + this.QuantityHandled.GetHashCode();
                if (this.RequestHandled != null)
                    hashCode = hashCode * 59 + this.RequestHandled.GetHashCode();
                if (this.QuantityNeeded != null)
                    hashCode = hashCode * 59 + this.QuantityNeeded.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
