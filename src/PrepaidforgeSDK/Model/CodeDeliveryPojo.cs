/* 
 * Prepaidforge API
 *
 * The public api for prepaidforge
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PrepaidforgeSDK.Client.OpenAPIDateConverter;

namespace PrepaidforgeSDK.Model
{
    /// <summary>
    /// CodeDeliveryPojo
    /// </summary>
    [DataContract]
    public partial class CodeDeliveryPojo :  IEquatable<CodeDeliveryPojo>, IValidatableObject
    {
        /// <summary>
        /// Defines CodeType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeTypeEnum
        {
            /// <summary>
            /// Enum TEXT for value: TEXT
            /// </summary>
            [EnumMember(Value = "TEXT")]
            TEXT = 1,

            /// <summary>
            /// Enum SCAN for value: SCAN
            /// </summary>
            [EnumMember(Value = "SCAN")]
            SCAN = 2,

            /// <summary>
            /// Enum FULLSCAN for value: FULLSCAN
            /// </summary>
            [EnumMember(Value = "FULLSCAN")]
            FULLSCAN = 3,

            /// <summary>
            /// Enum OCR for value: OCR
            /// </summary>
            [EnumMember(Value = "OCR")]
            OCR = 4,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 5

        }

        /// <summary>
        /// Gets or Sets CodeType
        /// </summary>
        [DataMember(Name="codeType", EmitDefaultValue=false)]
        public CodeTypeEnum? CodeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeDeliveryPojo" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="serial">serial.</param>
        /// <param name="image">image.</param>
        /// <param name="codeType">codeType.</param>
        public CodeDeliveryPojo(string code = default(string), string serial = default(string), Image image = default(Image), CodeTypeEnum? codeType = default(CodeTypeEnum?))
        {
            this.Code = code;
            this.Serial = serial;
            this.Image = image;
            this.CodeType = codeType;
        }
        
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Serial
        /// </summary>
        [DataMember(Name="serial", EmitDefaultValue=false)]
        public string Serial { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public Image Image { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CodeDeliveryPojo {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Serial: ").Append(Serial).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  CodeType: ").Append(CodeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CodeDeliveryPojo);
        }

        /// <summary>
        /// Returns true if CodeDeliveryPojo instances are equal
        /// </summary>
        /// <param name="input">Instance of CodeDeliveryPojo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CodeDeliveryPojo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Serial == input.Serial ||
                    (this.Serial != null &&
                    this.Serial.Equals(input.Serial))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.CodeType == input.CodeType ||
                    (this.CodeType != null &&
                    this.CodeType.Equals(input.CodeType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Serial != null)
                    hashCode = hashCode * 59 + this.Serial.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.CodeType != null)
                    hashCode = hashCode * 59 + this.CodeType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
